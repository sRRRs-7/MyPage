// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: answer.sql

package db

import (
	"context"
)

const createAnswer = `-- name: CreateAnswer :one
INSERT INTO answer (
    text, answer_id
) VALUES (
    $1, $2
) RETURNING id, answer_id, text, created_at
`

type CreateAnswerParams struct {
	Text     string `json:"text"`
	AnswerID int32  `json:"answer_id"`
}

func (q *Queries) CreateAnswer(ctx context.Context, arg CreateAnswerParams) (Answer, error) {
	row := q.db.QueryRowContext(ctx, createAnswer, arg.Text, arg.AnswerID)
	var i Answer
	err := row.Scan(
		&i.ID,
		&i.AnswerID,
		&i.Text,
		&i.CreatedAt,
	)
	return i, err
}

const deleteAnswer = `-- name: DeleteAnswer :exec
DELETE FROM answer
WHERE id = $1
`

func (q *Queries) DeleteAnswer(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteAnswer, id)
	return err
}

const getAnswer = `-- name: GetAnswer :one
SELECT id, answer_id, text, created_at FROM answer
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetAnswer(ctx context.Context, id int64) (Answer, error) {
	row := q.db.QueryRowContext(ctx, getAnswer, id)
	var i Answer
	err := row.Scan(
		&i.ID,
		&i.AnswerID,
		&i.Text,
		&i.CreatedAt,
	)
	return i, err
}

const getAnswerForUpdate = `-- name: GetAnswerForUpdate :one
SELECT id, answer_id, text, created_at FROM answer
WHERE id = $1 LIMIT 1
FOR UPDATE
`

func (q *Queries) GetAnswerForUpdate(ctx context.Context, id int64) (Answer, error) {
	row := q.db.QueryRowContext(ctx, getAnswerForUpdate, id)
	var i Answer
	err := row.Scan(
		&i.ID,
		&i.AnswerID,
		&i.Text,
		&i.CreatedAt,
	)
	return i, err
}

const listAnswer = `-- name: ListAnswer :many
SELECT id, answer_id, text, created_at FROM answer
ORDER BY id DESC
LIMIT $1
OFFSET $2
`

type ListAnswerParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListAnswer(ctx context.Context, arg ListAnswerParams) ([]Answer, error) {
	rows, err := q.db.QueryContext(ctx, listAnswer, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Answer{}
	for rows.Next() {
		var i Answer
		if err := rows.Scan(
			&i.ID,
			&i.AnswerID,
			&i.Text,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAnswer = `-- name: UpdateAnswer :one
UPDATE answer
SET text = $2
where id = $1
RETURNING id, answer_id, text, created_at
`

type UpdateAnswerParams struct {
	ID   int64  `json:"id"`
	Text string `json:"text"`
}

func (q *Queries) UpdateAnswer(ctx context.Context, arg UpdateAnswerParams) (Answer, error) {
	row := q.db.QueryRowContext(ctx, updateAnswer, arg.ID, arg.Text)
	var i Answer
	err := row.Scan(
		&i.ID,
		&i.AnswerID,
		&i.Text,
		&i.CreatedAt,
	)
	return i, err
}
