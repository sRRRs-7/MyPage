// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: question.sql

package db

import (
	"context"
)

const createQuestion = `-- name: CreateQuestion :one
INSERT INTO question (
    text
) VALUES (
    $1
) RETURNING id, text, answer_id, created_at
`

func (q *Queries) CreateQuestion(ctx context.Context, text string) (Question, error) {
	row := q.db.QueryRowContext(ctx, createQuestion, text)
	var i Question
	err := row.Scan(
		&i.ID,
		&i.Text,
		&i.AnswerID,
		&i.CreatedAt,
	)
	return i, err
}

const deleteQuestion = `-- name: DeleteQuestion :exec
DELETE FROM question
WHERE id = $1
`

func (q *Queries) DeleteQuestion(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteQuestion, id)
	return err
}

const getQuestion = `-- name: GetQuestion :one
SELECT id, text, answer_id, created_at FROM question
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetQuestion(ctx context.Context, id int64) (Question, error) {
	row := q.db.QueryRowContext(ctx, getQuestion, id)
	var i Question
	err := row.Scan(
		&i.ID,
		&i.Text,
		&i.AnswerID,
		&i.CreatedAt,
	)
	return i, err
}

const getQuestionForUpdate = `-- name: GetQuestionForUpdate :one
SELECT id, text, answer_id, created_at FROM question
WHERE id = $1 LIMIT 1
FOR UPDATE
`

func (q *Queries) GetQuestionForUpdate(ctx context.Context, id int64) (Question, error) {
	row := q.db.QueryRowContext(ctx, getQuestionForUpdate, id)
	var i Question
	err := row.Scan(
		&i.ID,
		&i.Text,
		&i.AnswerID,
		&i.CreatedAt,
	)
	return i, err
}

const listQuestion = `-- name: ListQuestion :many
SELECT id, text, answer_id, created_at FROM question
ORDER BY id DESC
LIMIT $1
OFFSET $2
`

type ListQuestionParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListQuestion(ctx context.Context, arg ListQuestionParams) ([]Question, error) {
	rows, err := q.db.QueryContext(ctx, listQuestion, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Question{}
	for rows.Next() {
		var i Question
		if err := rows.Scan(
			&i.ID,
			&i.Text,
			&i.AnswerID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateQuestion = `-- name: UpdateQuestion :one
UPDATE question
SET text = $2
where id = $1
RETURNING id, text, answer_id, created_at
`

type UpdateQuestionParams struct {
	ID   int64  `json:"id"`
	Text string `json:"text"`
}

func (q *Queries) UpdateQuestion(ctx context.Context, arg UpdateQuestionParams) (Question, error) {
	row := q.db.QueryRowContext(ctx, updateQuestion, arg.ID, arg.Text)
	var i Question
	err := row.Scan(
		&i.ID,
		&i.Text,
		&i.AnswerID,
		&i.CreatedAt,
	)
	return i, err
}
